using System;
using System.Threading;

class Tutorial 
{
    /// <summary>
    /// This is a simple tutorial program that demonstrates CPU usage patterns
    /// that can be analyzed with PerfView. The program uses recursive methods
    /// to create interesting call stack patterns.
    /// </summary>
    static void Main()
    {
        Console.WriteLine("Tutorial starting...");
        RecSpin(10);
        Console.WriteLine("Tutorial finished.");
    }

    /// <summary>
    /// Recursively spins for approximately the specified number of seconds,
    /// alternating between RecSpin and RecSpinHelper methods to create
    /// interesting call stack patterns for PerfView analysis.
    /// </summary>
    static void RecSpin(int seconds)
    {
        if (seconds <= 0)
            return;
            
        SpinForASecond();
        
        if (seconds > 1)
            RecSpinHelper(seconds - 1);
    }

    /// <summary>
    /// Helper method that works with RecSpin to create mutually recursive
    /// call patterns for demonstration purposes.
    /// </summary>
    static void RecSpinHelper(int seconds)
    {
        if (seconds <= 0)
            return;
            
        SpinForASecond();
        
        if (seconds > 1)
            RecSpin(seconds - 1);
    }

    /// <summary>
    /// Spins the CPU for approximately one second to simulate work.
    /// This method will show up prominently in PerfView's CPU analysis.
    /// </summary>
    static void SpinForASecond()
    {
        var start = DateTime.UtcNow;
        var spinFor = TimeSpan.FromSeconds(1);
        
        // Busy wait for approximately one second
        while (DateTime.UtcNow - start < spinFor)
        {
            // Intentionally empty loop to consume CPU
        }
    }
}